import os
import json
import asyncio
import telebot
import google.generativeai as genai
import logging
from typing import Optional, Dict, Any, Union

# Configure logging
logger = logging.getLogger(__name__)

# üîê Gemini API Key from environment or hardcoded
GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"
genai.configure(api_key=GEMINI_API_KEY)

MAX_TURNS = 100

# --- CUSTOM PERSONA PROMPT ---
# ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü‡¶ü‡¶ø ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø‡¶ï‡ßá ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨ ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶¶‡ßá‡¶¨‡ßá‡•§
CUSTOM_PERSONA_PROMPT = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ ‡¶Æ‡ßá‡ßü‡ßá ‡¶Ü‡¶∞ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡¶æ‡¶∞‡ßç‡¶≤‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶π‡¶Ø‡¶º‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨‡ßá, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶ï‡¶•‡¶æ‡ßü ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡ßá‡¶â ‡¶Ø‡ßá‡¶á ‡¶≠‡¶æ‡¶∑‡¶æ‡¶§‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶∏‡ßá‡¶á ‡¶≠‡¶æ‡¶∑‡¶æ‡¶§‡ßá‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá ‡•§"


class PerUserChatClient:
    """
    Manages a single chat session for a specific user.
    """
    def __init__(self, model_name: str = "gemini-1.5-flash-8b"):
        self.model = genai.GenerativeModel(model_name)
        # Add the custom persona prompt to the initial chat history
        initial_history = [
            {"role": "user", "parts": [CUSTOM_PERSONA_PROMPT]},
            {"role": "model", "parts": ["‡¶π‡¶æ‡¶á! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø‡•§ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã?"]}
        ]
        self.chat = self.model.start_chat(history=initial_history)
        self.history = initial_history
        self.model_name = model_name
        logger.info(f"New chat client created for model: {model_name}")

    async def send_message(self, prompt: str) -> Dict[str, Any]:
        try:
            response = await asyncio.to_thread(self.chat.send_message, prompt)

            if response.text:
                self.history.append({"role": "user", "parts": [prompt]})
                self.history.append({"role": "model", "parts": [response.text]})

                if len(self.history) > MAX_TURNS * 2:
                    self.history = self.history[-MAX_TURNS * 2:]
                    self.chat = self.model.start_chat(history=self.history)

                return {
                    'status': 'success',
                    'answer': response.text
                }
            else:
                return {
                    'status': 'error',
                    'error': '‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
                }
        except Exception as e:
            return {
                'status': 'error',
                'error': f'‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}'
            }

# Helper function to check if a user is an admin in a group
def is_admin(bot, chat_id, user_id):
    if chat_id > 0:
        return True
    try:
        member = bot.get_chat_member(chat_id, user_id)
        if member.status in ['administrator', 'creator']:
            return True
    except Exception as e:
        print(f"Error checking admin status: {e}")
    return False

def register(bot: telebot.TeleBot, custom_command_handler, command_prefixes_list):
    if not hasattr(bot, 'gemini_auto_reply_status'):
        bot.gemini_auto_reply_status = {}
    if not hasattr(bot, 'gemini_chat_clients'):
        bot.gemini_chat_clients = {}

    def get_or_create_client(chat_id) -> PerUserChatClient:
        if chat_id not in bot.gemini_chat_clients:
            bot.gemini_chat_clients[chat_id] = PerUserChatClient()
        return bot.gemini_chat_clients[chat_id]

    @custom_command_handler("gemini")
    def handle_gemini(message):
        command_text = message.text.split(" ", 1)[0].lower()
        actual_command_len = 0
        for prefix in command_prefixes_list:
            if command_text.startswith(f"{prefix}gemini"):
                actual_command_len = len(f"{prefix}gemini")
                break

        prompt_raw = message.text[actual_command_len:].strip()

        if not prompt_raw:
            bot.reply_to(message, f"‚ùì `{command_prefixes_list[0]}gemini [‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®]` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `{command_prefixes_list[0]}gemini ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã?`", parse_mode="Markdown")
            return

        thinking_message = bot.reply_to(message, "ü§ñ ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶≠‡¶æ‡¶¨‡¶õ‡ßá...")

        try:
            client = get_or_create_client(message.chat.id)
            result = asyncio.run(client.send_message(prompt_raw))

            if result['status'] == 'success':
                bot.edit_message_text(
                    chat_id=thinking_message.chat.id,
                    message_id=thinking_message.message_id,
                    text=f"ü§ñ {result['answer']}"
                )
            else:
                bot.edit_message_text(
                    chat_id=thinking_message.chat.id,
                    message_id=thinking_message.message_id,
                    text=f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {result['error']}"
                )
        except Exception as e:
            bot.edit_message_text(
                chat_id=thinking_message.chat.id,
                message_id=thinking_message.message_id,
                text=f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}"
            )

    @custom_command_handler("ongem")
    def enable_autoreply(message):
        if not is_admin(bot, message.chat.id, message.from_user.id):
            bot.reply_to(message, "‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
            return

        bot.gemini_auto_reply_status[message.chat.id] = True
        bot.reply_to(message, "‚úÖ ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø‡¶∞ ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    @custom_command_handler("offgem")
    def disable_autoreply(message):
        if not is_admin(bot, message.chat.id, message.from_user.id):
            bot.reply_to(message, "‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
            return

        bot.gemini_auto_reply_status[message.chat.id] = False
        if message.chat.id in bot.gemini_chat_clients:
            del bot.gemini_chat_clients[message.chat.id]
        bot.reply_to(message, "‚ùå ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø‡¶∞ ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    @bot.message_handler(func=lambda msg: bot.gemini_auto_reply_status.get(msg.chat.id, False) and msg.content_type == 'text' and not any(msg.text.lower().startswith(p) for p in command_prefixes_list))
    def auto_reply(message):
        chat_id = message.chat.id

        is_reply_to_me = message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id
        is_group_chat = message.chat.type in ["group", "supergroup"]
        is_at_mentioned = False
        if is_group_chat:
            if f"@{bot.get_me().username.lower()}" in message.text.lower():
                is_at_mentioned = True

        if is_group_chat and not is_reply_to_me and not is_at_mentioned:
            return

        thinking_message = bot.reply_to(message, "ü§ñ ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶≠‡¶æ‡¶¨‡¶õ‡ßá...")

        try:
            client = get_or_create_client(chat_id)
            reply = asyncio.run(client.send_message(message.text))

            if reply['status'] == 'success':
                bot.edit_message_text(
                    chat_id=thinking_message.chat.id,
                    message_id=thinking_message.message_id,
                    text=f"ü§ñ {reply['answer']}"
                )
            else:
                bot.edit_message_text(
                    chat_id=thinking_message.chat.id,
                    message_id=thinking_message.message_id,
                    text=f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {reply['error']}"
                )
        except Exception as e:
            bot.edit_message_text(
                chat_id=thinking_message.chat.id,
                message_id=thinking_message.message_id,
                text=f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}"
            )
