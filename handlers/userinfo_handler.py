# -*- coding: utf-8 -*-

import logging
from datetime import datetime
from dateutil.relativedelta import relativedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Chat, User
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logger = logging.getLogger(__name__)

# ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶õ‡¶¨‡¶ø
PROFILE_ERROR_URL = "https://telegra.ph/file/de3464973405308fd8727.jpg"

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def _estimate_account_creation_date(user_id: int) -> datetime:
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    # ‡¶è‡¶á ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶ü‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß®‡ß® ‡¶¨‡¶ø‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡¶æ‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡•§
    timestamp = ((user_id >> 22) + 1291560300)
    return datetime.fromtimestamp(timestamp)

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def _calculate_account_age(creation_date: datetime) -> str:
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§"""
    today = datetime.now()
    delta = relativedelta(today, creation_date)
    return f"{delta.years} ‡¶¨‡¶õ‡¶∞, {delta.months} ‡¶Æ‡¶æ‡¶∏, {delta.days} ‡¶¶‡¶ø‡¶®"

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶´‡¶∞‡ßç‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def _format_user_or_chat_info(entity: User | Chat, context: ContextTypes.DEFAULT_TYPE) -> dict:
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    info = {}
    photo_url = PROFILE_ERROR_URL

    if isinstance(entity, User):
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
        info['type'] = "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ"
        info['title'] = "üåü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø üåü"
        info['‡¶®‡¶æ‡¶Æ'] = f"{entity.first_name} {entity.last_name or ''}".strip()
        info['‡¶Ü‡¶á‡¶°‡¶ø'] = f"`{entity.id}`"
        info['‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ'] = f"@{entity.username}" if entity.username else "‡¶®‡ßá‡¶á"
        info['‡¶¨‡¶ü'] = "‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å" if entity.is_bot else "‚ùå ‡¶®‡¶æ"

        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶Ø‡¶º‡¶∏
        creation_date = _estimate_account_creation_date(entity.id)
        info['‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø'] = creation_date.strftime("%B %d, %Y")
        info['‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡¶Ø‡¶º‡¶∏'] = _calculate_account_age(creation_date)

        # ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø
        try:
            photos = await context.bot.get_user_profile_photos(entity.id, limit=1)
            if photos and photos.photos:
                file = await context.bot.get_file(photos.photos[0][-1].file_id)
                photo_url = file.file_path
        except Exception as e:
            logger.warning(f"‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {e}")

    elif isinstance(entity, Chat):
        # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü/‡¶ó‡ßç‡¶∞‡ßÅ‡¶™/‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
        info['type'] = "‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü"
        info['title'] = "üåü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶§‡¶•‡ßç‡¶Ø üåü"
        info['‡¶®‡¶æ‡¶Æ'] = entity.title
        info['‡¶Ü‡¶á‡¶°‡¶ø'] = f"`{entity.id}`"
        info['‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ'] = f"@{entity.username}" if entity.username else "‡¶®‡ßá‡¶á"
        info['‡¶ü‡¶æ‡¶á‡¶™'] = entity.type.capitalize()
        try:
            info['‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ'] = await context.bot.get_chat_member_count(entity.id)
        except Exception as e:
            info['‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ'] = "N/A"
            logger.warning(f"‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {e}")

        # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø
        try:
            if entity.photo:
                file = await context.bot.get_file(entity.photo.big_file_id)
                photo_url = file.file_path
        except Exception as e:
            logger.warning(f"‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {e}")

    caption = f"<b>{info.pop('title')}</b>\n\n"
    # ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶°‡¶æ‡¶â‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶´‡¶∞‡ßç‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ
    caption += "\n".join([f"<b>{key.replace('_', ' ').capitalize()}:</b> {value}" for key, value in info.items()])

    return {"caption": caption.replace('`', ''), "photo_url": photo_url, "entity": entity} # HTML parse mode ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø backtick (` `) ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá


async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/info ‡¶è‡¶¨‡¶Ç /id ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡•§"""
    message = update.effective_message
    chat = update.effective_chat
    user_to_find = None
    entity_id = None

    progress_message = await message.reply_text("‚ú® ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    try:
        if message.reply_to_message:
            user_to_find = message.reply_to_message.from_user
        elif context.args:
            arg = context.args[0]
            entity_id = arg.lstrip('@') if arg.startswith('@') else int(arg)
        else:
            user_to_find = message.from_user

        if user_to_find:
            entity_id = user_to_find.id

        if not entity_id:
             await progress_message.edit_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶®‡•§")
             return

        try:
            entity = await context.bot.get_chat(chat_id=entity_id)
        except Exception as e:
            logger.error(f"‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
            await progress_message.edit_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡ßá‡¶á‡•§")
            return

        result = await _format_user_or_chat_info(entity, context)
        caption = result['caption']
        photo_url = result['photo_url']
        found_entity = result['entity']

        buttons = []
        if isinstance(found_entity, User):
            buttons.append([InlineKeyboardButton("üîó ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï", url=f"tg://user?id={found_entity.id}")])
        
        await context.bot.send_photo(
            chat_id=chat.id,
            photo=photo_url,
            caption=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(buttons) if buttons else None
        )
        await progress_message.delete()

    except ValueError:
        await progress_message.edit_text("‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (@username) ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§")
    except Exception as e:
        logger.error(f"info ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        await progress_message.edit_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")


def register(application: Application) -> None:
    """
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá /info ‡¶è‡¶¨‡¶Ç /id ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
    """
    info_handler = CommandHandler(["info", "id"], user_info_command)
    application.add_handler(info_handler)
    logger.info("User Info handler ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

